diff --git a/.gitmodules b/.gitmodules
index 98dc79e..02f10d6 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,8 +1,3 @@
-[submodule "godot-cpp"]
-	path = godot-cpp
-	url = https://github.com/godotengine/godot-cpp.git
-	branch = 4.1
-	
 [submodule "src/thirdparty/tracy"]
 	path = src/thirdparty/tracy
 	url = https://github.com/wolfpld/tracy.git
diff --git a/addons/debug_draw_3d/libs/.gdignore b/__init__.py
similarity index 100%
rename from addons/debug_draw_3d/libs/.gdignore
rename to __init__.py
diff --git a/addons/debug_draw_3d/debug_draw_3d.gdextension b/addons/debug_draw_3d/debug_draw_3d.gdextension
deleted file mode 100644
index 523bd4a..0000000
--- a/addons/debug_draw_3d/debug_draw_3d.gdextension
+++ /dev/null
@@ -1,103 +0,0 @@
-[configuration]
-
-entry_symbol = "debug_draw_3d_library_init"
-compatibility_minimum = "4.1.4"
-reloadable = false
-
-[dependencies]
-
-; example.x86_64 = { "relative or absolute path to the dependency" : "the path relative to the exported project", }
-; -------------------------------------
-; debug
-
-macos = { }
-windows.x86_64 = { }
-linux.x86_64 = { }
-
-; by default godot is using threads
-web.wasm32.nothreads = {}
-web.wasm32 = {}
-
-android.arm32 = { }
-android.arm64 = { }
-android.x86_32 = { }
-android.x86_64 = { }
-
-ios = {}
-
-; -------------------------------------
-; release no debug draw
-
-macos.template_release = { }
-windows.template_release.x86_64 = { }
-linux.template_release.x86_64 = { }
-
-web.template_release.wasm32.nothreads = { }
-web.template_release.wasm32 = { }
-
-android.template_release.arm32 = { }
-android.template_release.arm64 = { }
-android.template_release.x86_32 = { }
-android.template_release.x86_64 = { }
-
-ios.template_release = {}
-
-; -------------------------------------
-; release forced debug draw
-
-macos.template_release.forced_dd3d = { }
-windows.template_release.x86_64.forced_dd3d = { }
-linux.template_release.x86_64.forced_dd3d = { }
-
-web.template_release.wasm32.nothreads.forced_dd3d = { }
-web.template_release.wasm32.forced_dd3d = { }
-
-ios.template_release.forced_dd3d = {}
-
-[libraries]
-
-; -------------------------------------
-; debug
-
-macos = "libs/libdd3d.macos.editor.universal.framework"
-windows.x86_64 = "libs/libdd3d.windows.editor.x86_64.dll"
-linux.x86_64 = "libs/libdd3d.linux.editor.x86_64.so"
-
-web.wasm32.nothreads = "libs/libdd3d.web.template_debug.wasm32.wasm"
-web.wasm32 = "libs/libdd3d.web.template_debug.wasm32.threads.wasm"
-
-android.arm32 = "libs/libdd3d.android.template_debug.arm32.so"
-android.arm64 = "libs/libdd3d.android.template_debug.arm64.so"
-android.x86_32 = "libs/libdd3d.android.template_debug.x86_32.so"
-android.x86_64 = "libs/libdd3d.android.template_debug.x86_64.so"
-
-ios = "libs/libdd3d.ios.template_debug.universal.dylib"
-
-; -------------------------------------
-; release no debug draw
-
-macos.template_release = "libs/libdd3d.macos.template_release.universal.framework"
-windows.template_release.x86_64 = "libs/libdd3d.windows.template_release.x86_64.dll"
-linux.template_release.x86_64 = "libs/libdd3d.linux.template_release.x86_64.so"
-
-web.template_release.wasm32.nothreads = "libs/libdd3d.web.template_release.wasm32.wasm"
-web.template_release.wasm32 = "libs/libdd3d.web.template_release.wasm32.threads.wasm"
-
-android.template_release.arm32 = "libs/libdd3d.android.template_release.arm32.so"
-android.template_release.arm64 = "libs/libdd3d.android.template_release.arm64.so"
-android.template_release.x86_32 = "libs/libdd3d.android.template_release.x86_32.so"
-android.template_release.x86_64 = "libs/libdd3d.android.template_release.x86_64.so"
-
-ios.template_release = "libs/libdd3d.ios.template_release.universal.dylib"
-
-; -------------------------------------
-; release forced debug draw
-
-macos.template_release.forced_dd3d = "libs/libdd3d.macos.template_release.universal.enabled.framework"
-windows.template_release.x86_64.forced_dd3d = "libs/libdd3d.windows.template_release.x86_64.enabled.dll"
-linux.template_release.x86_64.forced_dd3d = "libs/libdd3d.linux.template_release.x86_64.enabled.so"
-
-web.template_release.wasm32.nothreads.forced_dd3d = "libs/libdd3d.web.template_release.wasm32.enabled.wasm"
-web.template_release.wasm32.forced_dd3d = "libs/libdd3d.web.template_release.wasm32.threads.enabled.wasm"
-
-ios.template_release.forced_dd3d = "libs/libdd3d.ios.template_release.universal.enabled.dylib"
diff --git a/addons/debug_draw_3d/LICENSE b/addons/godot_debug_draw_3d/LICENSE
old mode 100644
new mode 100755
similarity index 100%
rename from addons/debug_draw_3d/LICENSE
rename to addons/godot_debug_draw_3d/LICENSE
diff --git a/addons/debug_draw_3d/README.md b/addons/godot_debug_draw_3d/README.md
old mode 100644
new mode 100755
similarity index 100%
rename from addons/debug_draw_3d/README.md
rename to addons/godot_debug_draw_3d/README.md
diff --git a/addons/godot_debug_draw_3d/debug_draw_3d.gdextension b/addons/godot_debug_draw_3d/debug_draw_3d.gdextension
new file mode 100755
index 0000000..f8e3f49
--- /dev/null
+++ b/addons/godot_debug_draw_3d/debug_draw_3d.gdextension
@@ -0,0 +1,103 @@
+[configuration]
+
+entry_symbol = "debug_draw_3d_library_init"
+compatibility_minimum = "4.1.4"
+reloadable = false
+
+[dependencies]
+
+; example.x86_64 = { "relative or absolute path to the dependency" : "the path relative to the exported project", }
+; -------------------------------------
+; debug
+
+macos = { }
+windows.x86_64 = { }
+linux.x86_64 = { }
+
+; by default godot is using threads
+web.wasm32.nothreads = {}
+web.wasm32 = {}
+
+android.arm32 = { }
+android.arm64 = { }
+android.x86_32 = { }
+android.x86_64 = { }
+
+ios = {}
+
+; -------------------------------------
+; release no debug draw
+
+macos.template_release = { }
+windows.template_release.x86_64 = { }
+linux.template_release.x86_64 = { }
+
+web.template_release.wasm32.nothreads = { }
+web.template_release.wasm32 = { }
+
+android.template_release.arm32 = { }
+android.template_release.arm64 = { }
+android.template_release.x86_32 = { }
+android.template_release.x86_64 = { }
+
+ios.template_release = {}
+
+; -------------------------------------
+; release forced debug draw
+
+macos.template_release.forced_dd3d = { }
+windows.template_release.x86_64.forced_dd3d = { }
+linux.template_release.x86_64.forced_dd3d = { }
+
+web.template_release.wasm32.nothreads.forced_dd3d = { }
+web.template_release.wasm32.forced_dd3d = { }
+
+ios.template_release.forced_dd3d = {}
+
+[libraries]
+
+; -------------------------------------
+; debug
+
+macos = "libs/libgodot_debug_draw_3d.macos.editor.universal.framework"
+windows.x86_64 = "libs/libgodot_debug_draw_3d.windows.editor.x86_64.dll"
+linux.x86_64 = "/home/ads/dev/go-dotter/libgodot_debug_draw_3d.so"
+
+web.wasm32.nothreads = "libs/libgodot_debug_draw_3d.web.template_debug.wasm32.wasm"
+web.wasm32 = "libs/libgodot_debug_draw_3d.web.template_debug.wasm32.threads.wasm"
+
+android.arm32 = "libs/libgodot_debug_draw_3d.android.template_debug.arm32.so"
+android.arm64 = "libs/libgodot_debug_draw_3d.android.template_debug.arm64.so"
+android.x86_32 = "libs/libgodot_debug_draw_3d.android.template_debug.x86_32.so"
+android.x86_64 = "libs/libgodot_debug_draw_3d.android.template_debug.x86_64.so"
+
+ios = "libs/libgodot_debug_draw_3d.ios.template_debug.universal.dylib"
+
+; -------------------------------------
+; release no debug draw
+
+macos.template_release = "libs/libgodot_debug_draw_3d.macos.template_release.universal.framework"
+windows.template_release.x86_64 = "libs/libgodot_debug_draw_3d.windows.template_release.x86_64.dll"
+linux.template_release.x86_64 = "libs/libgodot_debug_draw_3d.linux.template_release.x86_64.so"
+
+web.template_release.wasm32.nothreads = "libs/libgodot_debug_draw_3d.web.template_release.wasm32.wasm"
+web.template_release.wasm32 = "libs/libgodot_debug_draw_3d.web.template_release.wasm32.threads.wasm"
+
+android.template_release.arm32 = "libs/libgodot_debug_draw_3d.android.template_release.arm32.so"
+android.template_release.arm64 = "libs/libgodot_debug_draw_3d.android.template_release.arm64.so"
+android.template_release.x86_32 = "libs/libgodot_debug_draw_3d.android.template_release.x86_32.so"
+android.template_release.x86_64 = "libs/libgodot_debug_draw_3d.android.template_release.x86_64.so"
+
+ios.template_release = "libs/libgodot_debug_draw_3d.ios.template_release.universal.dylib"
+
+; -------------------------------------
+; release forced debug draw
+
+macos.template_release.forced_dd3d = "libs/libgodot_debug_draw_3d.macos.template_release.universal.enabled.framework"
+windows.template_release.x86_64.forced_dd3d = "libs/libgodot_debug_draw_3d.windows.template_release.x86_64.enabled.dll"
+linux.template_release.x86_64.forced_dd3d = "libs/libgodot_debug_draw_3d.linux.template_release.x86_64.enabled.so"
+
+web.template_release.wasm32.nothreads.forced_dd3d = "libs/libgodot_debug_draw_3d.web.template_release.wasm32.enabled.wasm"
+web.template_release.wasm32.forced_dd3d = "libs/libgodot_debug_draw_3d.web.template_release.wasm32.threads.enabled.wasm"
+
+ios.template_release.forced_dd3d = "libs/libgodot_debug_draw_3d.ios.template_release.universal.enabled.dylib"
diff --git a/godot-cpp b/godot-cpp
deleted file mode 160000
index a4f9d22..0000000
--- a/godot-cpp
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit a4f9d22ac54e05ca6a41d54a59afd7555cb7d292
diff --git a/include/debugdraw3d/api.h b/include/debugdraw3d/api.h
new file mode 100644
index 0000000..560e5f3
--- /dev/null
+++ b/include/debugdraw3d/api.h
@@ -0,0 +1,28 @@
+#pragma once
+
+#ifdef _WIN32
+    // #ifdef LIBRARY_EXPORTS
+        #define DD3D_API __declspec(dllexport)
+    // #else
+        // #define DD3D_API __declspec(dllimport)
+    // #endif
+#else
+    #define DD3D_API __attribute__((visibility("default")))
+#endif
+
+#include "../../src/common/colors.h"
+GODOT_WARNING_DISABLE()
+#include <godot_cpp/variant/vector3.hpp>
+#include <godot_cpp/variant/transform3d.hpp>
+#include <godot_cpp/variant/quaternion.hpp>
+GODOT_WARNING_RESTORE()
+
+using namespace godot;
+
+namespace DebugDraw{
+	DD3D_API void Arrow(const Vector3 &a, const Vector3 &b, const Color &color = Colors::empty_color, const real_t &arrow_size = 0.5f, const bool &is_absolute_size = false, const real_t &duration = 0);
+	DD3D_API void Box(const Vector3 &position, const Quaternion &rotation, const Vector3 &size, const Color &color = Colors::empty_color, const bool &is_box_centered = false, const real_t &duration = 0);
+	DD3D_API void Line(const Vector3 &a, const Vector3 &b, const Color &color = Colors::empty_color, const real_t &duration = 0);
+	DD3D_API void Position(const Transform3D &transform, const Color &color = Colors::empty_color, const real_t &duration = 0);
+	DD3D_API void Sphere(const Vector3 &position, const real_t &radius = 0.5f, const Color &color = Colors::empty_color, const real_t &duration = 0);
+}
\ No newline at end of file
diff --git a/lib_utils.py b/lib_utils.py
index 7b65e53..24b25d7 100644
--- a/lib_utils.py
+++ b/lib_utils.py
@@ -1,11 +1,12 @@
 #!/usr/bin/env python3
 
 from SCons.Script.SConscript import SConsEnvironment
-from patches import unity_tools
+from godot_debug_draw_3d.patches import unity_tools
 
 import SCons
 import os, json, re
 
+current_dir = os.path.dirname(os.path.abspath(__file__))
 
 def get_sources(src: list, src_folder: str, lib_name: str = "unity_"):
     res = [os.path.join(src_folder, file) for file in src]
@@ -14,42 +15,39 @@ def get_sources(src: list, src_folder: str, lib_name: str = "unity_"):
 
 
 def get_library_object(env: SConsEnvironment, project_name: str, lib_name: str, extra_tags: str, output_path: str, src_folder: str, additional_src: list) -> str:
-    env.Append(CPPPATH=src_folder)
+    current_cpppath: list = env['CPPPATH']
+    public_api = os.path.join(os.path.dirname(src_folder), 'include')
+    env.Append(CPPPATH=[src_folder, public_api])
 
     src = []
     with open(src_folder + "/default_sources.json") as f:
         src = json.load(f)
 
-    scons_cache_path = os.environ.get("SCONS_CACHE")
-    if scons_cache_path is None:
-        # store all obj's in a dedicated folder
-        env["SHOBJPREFIX"] = "#obj/"
-    else:
-        env.CacheDir(scons_cache_path)
-        env.Decider("MD5")
-
     # some additional tags if needed
     additional_tags = ""
 
     if env["platform"] == "web" and env.get("threads", True):
         additional_tags = ".threads"
 
-    lib_filename = "lib{}.{}.{}.{}{}".format(lib_name, env["platform"], env["target"], env["arch"], additional_tags + extra_tags) + env["SHLIBSUFFIX"]
-
-    if env["platform"] == "macos":
-        generate_framework_folder(env, project_name, lib_name, lib_filename, output_path)
-        lib_filename = os.path.join(output_path, os.path.splitext(lib_filename)[0] + ".framework", lib_filename)
-    else:
-        lib_filename = os.path.join(output_path, lib_filename)
-
-    env.Default(
-        env.SharedLibrary(
-            target=env.File(lib_filename),
-            source=get_sources(additional_src + src, src_folder, lib_name)
-        )
+    lib_filename = "#lib{}.{}.{}.{}{}".format(lib_name, env["platform"], env["target"], env["arch"], additional_tags + extra_tags) + env["SHLIBSUFFIX"]
+    
+    # if env["platform"] == "macos":
+    #     generate_framework_folder(env, project_name, lib_name, lib_filename, output_path)
+    #     lib_filename = os.path.join(output_path, os.path.splitext(lib_filename)[0] + ".framework", lib_filename)
+    # else:
+    #     lib_filename = os.path.join(output_path, lib_filename)
+    lib_filename = lib_name
+    ret = env.SharedLibrary(
+        # target=env.File(lib_filename),
+        target=lib_filename,
+        source=get_sources(additional_src + src, src_folder, lib_name)
     )
 
-    return lib_filename
+    current_cpppath.append(public_api)
+    current_cpppath.append(src_folder)
+    env["CPPPATH"] = current_cpppath
+
+    return ret
 
 
 def get_library_version():
diff --git a/SConstruct b/sconstruct.py
similarity index 73%
rename from SConstruct
rename to sconstruct.py
index c7e1f8e..b7d695b 100644
--- a/SConstruct
+++ b/sconstruct.py
@@ -5,17 +5,20 @@ from SCons.Script.SConscript import SConsEnvironment
 
 import SCons, SCons.Script
 import sys, os, platform
-import lib_utils, lib_utils_external
+import godot_debug_draw_3d.lib_utils as lib_utils
+import godot_debug_draw_3d.lib_utils_external as lib_utils_external
 
 # Fixing the encoding of the console
 if platform.system() == "Windows":
     os.system("chcp 65001")
 
+current_dir = os.path.dirname(os.path.abspath(__file__))
 # Project config
-project_name = "Debug Draw 3D"
-lib_name = "dd3d"
-default_output_dir = os.path.join("addons", "debug_draw_3d", "libs")
-src_folder = "src"
+project_name = "godot_debug_draw_3d"
+lib_name = "godot_debug_draw_3d"
+# default_output_dir = os.path.join("addons", "godot_debug_draw_3d", "libs")
+default_output_dir = os.path.join(os.path.dirname(current_dir), "project/addons/vendor/libs")
+src_folder = os.path.join(current_dir, "src")
 
 # If necessary, add patches from the code
 patches_to_apply = [
@@ -127,45 +130,21 @@ def generate_sources_for_resources(env, src_out):
     print("The generation of C++ sources with the contents of resources has been completed")
     print()
 
+# args = ARGUMENTS
+def configure_environment(env: SConsEnvironment, args) -> str:
+    os.chdir(current_dir)
+    additional_src = []
+    setup_options(env, args)
+    setup_defines_and_flags(env, additional_src)
+    generate_sources_for_resources(env, additional_src)
 
-def apply_patches(target, source, env: SConsEnvironment):
-    return lib_utils_external.apply_git_patches(env, patches_to_apply, "godot-cpp")
+    extra_tags = ""
+    if "release" in env["target"] and env["force_enabled_dd3d"]:
+        extra_tags += ".enabled"
 
-
-def get_android_toolchain() -> str:
-    sys.path.insert(0, "godot-cpp/tools")
-    import android
-
-    sys.path.pop(0)
-    return os.path.join(android.get_android_ndk_root(env), "build/cmake/android.toolchain.cmake")
-
-
-# Additional build of the projects via CMake
-# def build_cmake(target, source, env: SConsEnvironment):
-#    extra_flags = []
-#    if env["platform"] in ["macos", "ios"]:
-#        extra_flags += ["-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64", "-DCMAKE_OSX_DEPLOYMENT_TARGET=10.14"]
-#    if env["platform"] in ["android"]:
-#        extra_flags += [f"-DCMAKE_TOOLCHAIN_FILE={get_android_toolchain()}"]
-#    return lib_utils_external.cmake_build_project(env, "project", extra_flags)
-
-env: SConsEnvironment = SConscript("godot-cpp/SConstruct")
-env = env.Clone()
-
-args = ARGUMENTS
-additional_src = []
-setup_options(env, args)
-setup_defines_and_flags(env, additional_src)
-generate_sources_for_resources(env, additional_src)
-
-extra_tags = ""
-if "release" in env["target"] and env["force_enabled_dd3d"]:
-    extra_tags += ".enabled"
-
-lib_utils.get_library_object(
-    env, project_name, lib_name, extra_tags, env["addon_output_dir"], src_folder, additional_src
-)
-
-# Register console commands
-env.Command("apply_patches", [], apply_patches)
-# env.Command("build_cmake", [], build_cmake)
+    libname = lib_utils.get_library_object(
+        env, project_name, lib_name, extra_tags, env["addon_output_dir"], src_folder, additional_src
+    )
+    # trick with os.chdir to avoid having to change this recipe too much
+    os.chdir(os.path.dirname(os.getcwd()))
+    return libname
diff --git a/src/2d/config_2d.h b/src/2d/config_2d.h
index a4b5b99..ff9145a 100644
--- a/src/2d/config_2d.h
+++ b/src/2d/config_2d.h
@@ -1,7 +1,7 @@
 #pragma once
 
-#include "common/colors.h"
-#include "utils/compiler.h"
+#include "../common/colors.h"
+#include "../utils/compiler.h"
 
 #include <functional>
 
diff --git a/src/api.cpp b/src/api.cpp
new file mode 100644
index 0000000..5708584
--- /dev/null
+++ b/src/api.cpp
@@ -0,0 +1,25 @@
+#include <3d/debug_draw_3d.h>
+#include <debugdraw3d/api.h>
+
+
+void DebugDraw::Arrow(const Vector3& a, const Vector3& b, const Color& color, const real_t& arrow_size,
+		const bool& is_absolute_size, const real_t& duration) {
+	DebugDraw3D::get_singleton()->draw_arrow(a, b, color, arrow_size, is_absolute_size, duration);
+}
+
+void DebugDraw::Box(const Vector3& position, const Quaternion& rotation, const Vector3& size, const Color& color,
+		const bool& is_box_centered, const real_t& duration) {
+	DebugDraw3D::get_singleton()->draw_box(position, rotation, size, color, is_box_centered, duration);
+}
+
+void DebugDraw::Line(const Vector3& a, const Vector3& b, const Color& color, const real_t& duration) {
+	DebugDraw3D::get_singleton()->draw_line(a, b, color, duration);
+}
+
+void DebugDraw::Position(const Transform3D& transform, const Color& color, const real_t& duration) {
+	DebugDraw3D::get_singleton()->draw_position(transform, color, duration);
+}
+
+void DebugDraw::Sphere(const Vector3& position, const real_t& radius, const Color& color, const real_t& duration) {
+	DebugDraw3D::get_singleton()->draw_sphere(position, radius, color, duration);
+}
diff --git a/src/common/colors.h b/src/common/colors.h
index 85d28c3..f040123 100644
--- a/src/common/colors.h
+++ b/src/common/colors.h
@@ -1,6 +1,6 @@
 #pragma once
 
-#include "utils/compiler.h"
+#include "../utils/compiler.h"
 
 GODOT_WARNING_DISABLE()
 #include <godot_cpp/variant/color.hpp>
diff --git a/src/default_sources.json b/src/default_sources.json
index 186a0dc..7c3a437 100644
--- a/src/default_sources.json
+++ b/src/default_sources.json
@@ -18,5 +18,6 @@
   "editor/generate_csharp_bindings.cpp",
   "register_types.cpp",
   "utils/math_utils.cpp",
-  "utils/utils.cpp"
+  "utils/utils.cpp",
+  "api.cpp"
 ]
\ No newline at end of file

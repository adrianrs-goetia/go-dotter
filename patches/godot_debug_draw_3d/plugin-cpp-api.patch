diff --git a/include/debugdraw3d/api.h b/include/debugdraw3d/api.h
new file mode 100644
index 0000000..e5c702d
--- /dev/null
+++ b/include/debugdraw3d/api.h
@@ -0,0 +1,28 @@
+#pragma once
+
+#ifdef _WIN32
+    // #ifdef LIBRARY_EXPORTS
+        #define DD3D_API __declspec(dllexport)
+    // #else
+        // #define DD3D_API __declspec(dllimport)
+    // #endif
+#else
+    #define DD3D_API
+#endif
+
+#include "../../src/debugdraw3d/common/colors.h"
+GODOT_WARNING_DISABLE()
+#include <godot_cpp/variant/vector3.hpp>
+#include <godot_cpp/variant/transform3d.hpp>
+#include <godot_cpp/variant/quaternion.hpp>
+GODOT_WARNING_RESTORE()
+
+using namespace godot;
+
+namespace DebugDraw{
+	DD3D_API void Arrow(const Vector3 &a, const Vector3 &b, const Color &color = Colors::empty_color, const real_t &arrow_size = 0.5f, const bool &is_absolute_size = false, const real_t &duration = 0);
+	DD3D_API void Box(const Vector3 &position, const Quaternion &rotation, const Vector3 &size, const Color &color = Colors::empty_color, const bool &is_box_centered = false, const real_t &duration = 0);
+	DD3D_API void Line(const Vector3 &a, const Vector3 &b, const Color &color = Colors::empty_color, const real_t &duration = 0);
+	DD3D_API void Position(const Transform3D &transform, const Color &color = Colors::empty_color, const real_t &duration = 0);
+	DD3D_API void Sphere(const Vector3 &position, const real_t &radius = 0.5f, const Color &color = Colors::empty_color, const real_t &duration = 0);
+}
\ No newline at end of file
diff --git a/src/api.cpp b/src/api.cpp
new file mode 100644
index 0000000..5708584
--- /dev/null
+++ b/src/api.cpp
@@ -0,0 +1,25 @@
+#include <3d/debug_draw_3d.h>
+#include <debugdraw3d/api.h>
+
+
+void DebugDraw::Arrow(const Vector3& a, const Vector3& b, const Color& color, const real_t& arrow_size,
+		const bool& is_absolute_size, const real_t& duration) {
+	DebugDraw3D::get_singleton()->draw_arrow(a, b, color, arrow_size, is_absolute_size, duration);
+}
+
+void DebugDraw::Box(const Vector3& position, const Quaternion& rotation, const Vector3& size, const Color& color,
+		const bool& is_box_centered, const real_t& duration) {
+	DebugDraw3D::get_singleton()->draw_box(position, rotation, size, color, is_box_centered, duration);
+}
+
+void DebugDraw::Line(const Vector3& a, const Vector3& b, const Color& color, const real_t& duration) {
+	DebugDraw3D::get_singleton()->draw_line(a, b, color, duration);
+}
+
+void DebugDraw::Position(const Transform3D& transform, const Color& color, const real_t& duration) {
+	DebugDraw3D::get_singleton()->draw_position(transform, color, duration);
+}
+
+void DebugDraw::Sphere(const Vector3& position, const real_t& radius, const Color& color, const real_t& duration) {
+	DebugDraw3D::get_singleton()->draw_sphere(position, radius, color, duration);
+}

#!/usr/bin/env python

from SCons.Script import SConscript
from SCons.Script.SConscript import SConsEnvironment
from SCons.Variables import Variables, BoolVariable, EnumVariable, PathVariable

import SCons, SCons.Script
import sys, os, platform

project_name = "gameplay-cpp"
lib_name = "gameplaycpp"
default_output_dir = os.path.join("addons", "gameplay_cpp", "libs")
src = [
    "src/camerapivot.cpp",
    "src/core.cpp",
    "src/grapplecomponent.cpp",
    "src/inputcomponent.cpp",
    "src/mainnode.cpp",
    "src/parrycomponent.cpp",
    "src/playernode.cpp",
    "src/playerstates.cpp",
]

env: SConsEnvironment = SConscript("../godot-cpp/SConstruct")
env = env.Clone()

args = ARGUMENTS
additional_src = []

env.Append(CPPPATH=['include'])

scons_cache_path = os.environ.get("SCONS_CACHE")
if scons_cache_path is not None:
    env.CacheDir(scons_cache_path)
    env.Decider("MD5")

lib_filename = "lib{}.{}.{}.{}".format(lib_name, env["platform"], env["target"], env["arch"]) + env["SHLIBSUFFIX"]

opts = Variables([], args)
opts.Add(
    PathVariable(
        "addon_output_dir", "Path to the output directory", default_output_dir, PathVariable.PathIsDirCreate
    )
)
opts.Update(env)
env.Help(opts.GenerateHelpText(env))

env.Default(
    env.SharedLibrary(
        target=env.File(lib_filename),
        source=src
    )
)